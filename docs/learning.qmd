---
title: "LearnR3"
author: "Ingrid M. Wagnon"
format:
  html:
    number-sections: true
    markdown:
      hardline-breaks: true
---

Note about the YAML : Very sensitive to spacing and tabulation.

Keep your stable, robust functions in a separate file for easier re-use across your files, for instance, in the R/functions.R file. You can re-use the functions by using source(here("R/functions.R")) in your Quarto documents.

To make sure your code runs smoothly use the function usethis::use_package("library called") in the console which should add the necessary packages to the DESCRIPTION file.
For tidyverse use : usethis::use_package("tidyverse", type = "Depends").

```{r setup}
library(tidyverse)
library(here)
library(snakecase)
library(fs)
library(purrr)
library(stringr)
library(lubridate)
source(here("R/functions.R"))

cgm_data <- here("data-raw/dime/cgm") |>
  import_csv_files() |>
  clean_cgm()

sleep_data <- here("data-raw/dime/sleep") |>
  import_csv_files() |>
  clean_sleep()

participant_details <- here("data-raw/dime/participant_details.csv") |>
  import_dime() |>
  clean_participant_details()

dime_data <- participant_details |>
  full_join(cgm_data) |>
  full_join(sleep_data)
```


# Importing Raw Data

## Import CGM

Just about GitHub : If you want it private you can add a private argument.

When you load data from a CSV file into R with read_csv(), the function will try to guess what the data types are for each column. Usually it guesses accurately.
The argument show_col_types = FALSE tells R to just guess and to not give a warning message.
Otherwise we could explicitly tell read_csv() what the column names and data types are using the argument col_types. This is a very tedious, but often very powerful and useful step depending on the issues your data may have.

The column names are not in a format that we can easily use. For example, the first column is called "Device Timestamp" and the space in the name will make it harder to work with. So, we will need to fix the column names up to follow a common style and that is easier to code with. That style is snake_case that uses _ for spaces and is all lower case.
The function from snakecase that we want to use in the name_repair argument is the to_snake_case() function. To convert the variable names to snake case, we would add name_repair = to_snake_case to the code

The n_max argument to only load in the first 100 rows

If necessary (not shown in this example) you can use col_select = arguments in read_csv() to import only the data you need.

```{r importing csv}
cgm_101 <- here("data-raw/dime/cgm/101.csv") |>
  read_csv(
    show_col_types = FALSE,
    name_repair = to_snake_case,
    n_max = 100
  )
```


## Exercise: Import 101's sleep data

```{r importing csv exercise}
sleep_101 <- here("data-raw/dime/sleep/101.csv") |>
  read_csv(
    show_col_types = FALSE,
    name_repair = to_snake_case,
    n_max = 101
  )
sleep_101
```


# Creating Functions

Basic structure of a function:  

<span style="color: blue;">name <- function(argument1, argument2) {  
    # body of function  
    output <- ... code ....  
    return(output)  
}  </span>

## Making a function to add numbers

```{r example of adding numbers}
#' Add two numbers together.
#'
#' @param num1 A number here.
#' @param num2 A number here.
#'
#' @return Returns the sum of the two numbers.
#'

add_numbers <- function(num1, num2) {
  added <- num1 + num2
  return(added)
}

add_numbers(1, 2)
```

## Import 101's cgm data with a function

From how we import our data we create a function.

It's good practice to not hard code the use of here() within a function. Instead, it’s good design to give functions a full file path that it can use internally. Then when we use the function, we would use here() with the correct path in the function argument. 

Then we simplify things internally by renaming cgm_101 to simply cgm, since we would like to be able to import other participant CGM data later.

```{r create cgm function}
#' Import one participants CGM data from the DIME dataset.
#'
#' @param file_path Path to the CGM dataset.
#'
#' @returns Outputs a data frame/tibble.
#'
import_cgm <- function(file_path) {
  cgm <- file_path |>
    read_csv(
      show_col_types = FALSE,
      name_repair = to_snake_case,
      n_max = 100
    )
  return(cgm)
}
```

```{r test 1 cgm}
here("data-raw/dime/cgm/101.csv") |>
  import_cgm()
```

```{r test 2 cgm}
here("data-raw/dime/cgm/102.csv") |>
  import_cgm()
```

# Exercise : Create sleep function

<span style="color: blue;"> name <- function(argument1, argument2) {  
    # body of function  
    output <- ... code ....  
    return(output)  
}  </span>

```{r create sleep function}
#' Import one participants SLEEP data from the DIME dataset.
#'
#' @param file_path Path to the CGM dataset.
#'
#' @returns Outputs a data frame/tibble.
#'
import_sleep <- function(file_path) {
  sleep <- file_path |>
    read_csv(
      show_col_types = FALSE,
      name_repair = to_snake_case,
      n_max = 101
    )
  return(sleep)
}
```

```{r test 1 sleep}
here("data-raw/dime/sleep/101.csv") |>
  import_sleep()
```

```{r test 2 sleep}
here("data-raw/dime/sleep/102.csv") |>
  import_sleep()
```

# Import DIME data function : Make function more general

Specifically call the package from which the function you are using comes from 

To make sure your code runs smoothly use the function usethis::use_package("library called") in the console which should add the necessary packages to the DESCRIPTION file.
For tidyverse use : usethis::use_package("tidyverse", type = "Depends")

The following is supposed to be a code but we technically need to CUT and PASTE into the functions.R file - but I kept it here to see the final product as text.

 <span style="color: blue;"> {r import_dime function}  
 #' Import data from the DIME study dataset.  
 #'  
 #' @param file_path Path to the CSV file.  
 #' @param n Optional parameter that limits the number of rows. Default is 100.  
 #'  
 #' @returns A data frame.  
 #'  
 import_dime <- function(file_path, n = 100) {  
   data <- file_path |>  
     readr::read_csv(  
       show_col_types = FALSE,  
       name_repair = snakecase::to_snake_case,  
       n_max = n  
     )  
   return(data)  
 } </span>

```{r use funciton import dime on cgm and sleep}
here("data-raw/dime/cgm/101.csv") |>
  import_dime()
here("data-raw/dime/sleep/101.csv") |>
  import_dime()
```


```{r homemade data snake function}
#' Import data from dime
#'
#' @param typedata cmg or sleep.
#' @param id Patient ID number.
#' @param n Optional but number of row, default is 100.
#'
#' @returns Output data tibble.
#'
import_data_snake <- function(typedata, id, n = 100) {
  datasnake <- here::here(paste0("data-raw/dime/", as.character(typedata), "/", as.character(id), ".csv")) |>
    readr::read_csv(
      show_col_types = FALSE,
      name_repair = snakecase::to_snake_case,
      n_max = n
    )
  return(datasnake)
}
```

```{r test snake}
import_data_snake("sleep", "101", 93)
```


# Using map

The dir_ls() function takes the path that we want to search, in this case data-raw/dime/cgm and has an argument called glob to tell it what type of files to search for. In our case, we want to search for all CSV files in the data-raw/dime/cgm/ folder. So we will pipe the output of the path to the CGM folder with here() into dir_ls():

```{r dirl_ls}
cgm_files <- here("data-raw/dime/cgm/") |>
  dir_ls(glob = "*.csv")

cgm_files
```

```{r map}
cgm_data_mapuse <- cgm_files |>
  map(import_dime)

cgm_data_mapuse[1:2] # this is to import only 2 dataset instead of 101 of them
```

There are two functions that take a list of data frames and convert them into a single data frame. They are called list_rbind() to bind (“stack”) the data frames by rows or list_cbind() to bind (“stack”) the data frames by columns. In our case, we want to bind (stack) by rows, so we will use list_rbind() by piping the output of the map() code we wrote into list_rbind().

```{r map and list_bind}
cgm_data_mapuse <- cgm_files |>
  map(import_dime) |>
  list_rbind()

cgm_data_mapuse
```

list_rbind() has an argument called names_to. This argument lets us create a new column that is based on the name of the list item, which in our case is the file path. This file path also has the participant ID information in it, but it also has the full file path in it too, which isn’t exactly what we want. So we’ll have to fix it later. But first, let’s start with adding this information to the data frame as a new column called file_path_id.

```{r add names_to}
cgm_data_mapuse <- cgm_files |>
  map(import_dime) |>
  list_rbind(names_to = "file_path_id")

cgm_data_mapuse
```


## Convert map to function and use on sleep

 <span style="color: blue;">{r code function}  
 #' Import the csv files  
 #'  
 #' @param folder_path give the here("folder_path") where to look  
 #'  
 #' @returns tibble or data  
 #'  
 import_csv_files <- function(folder_path) {  
   files <- folder_path |>  
     fs::dir_ls(glob = "*.csv")  
   data <- files |>  
     purrr::map(import_dime) |>  
     purrr::list_rbind(names_to = "file_path_id")  
   return(data)  
 }  </span>

```{r try import csv files function}
here("data-raw/dime/cgm/") |>
  import_csv_files()
here("data-raw/dime/sleep/") |>
  import_csv_files()
```


# Using Regex for ID

<span style="color: blue;">  {r extract ID}  
  cgm_data |>  
 mutate(  
    id = str_extract(  
      file_path_id,  
      "[:digit:]+\\.csv$"  
    ) |>  
      str_remove("\\.csv$") |>  
      as.integer(),  
    .before = file_path_id  
  ) |>  
  select(-file_path_id)  </span>


## Exercise : Create get ID function
<span style="color: blue;">{ r create get ID function}  
 #' Get participant ID as first column  
 #'  
 #' @param data   
 #'  
 #' @returns table  
 #'  
 get_participant_id <- function(data) {  
 data_with_id <- data |>  
   dplyr::mutate(  
     id = stringr::str_extract(  
       file_path_id,  
       "[:digit:]+\\.csv$"  
     ) |>  
       stringr::str_remove("\\.csv$") |>  
       as.integer(),  
     .before = file_path_id  
   ) |>  
   select(-file_path_id)  
   return(data_with_id)  
 }  </span>


# Working with dates

<span style="color: blue;">{r first how to work with dates}  
cgm_data |>  
  mutate(  
    date = as_date(device_timestamp),  
    hour = hour(device_timestamp),  
    .before = device_timestamp  
  )  </span>


In R, NSE is what allows you to use formulas (e.g. y ~ x + x2) in statistical models or allows you to type out select(Gender, BMI) or library(purrr). In “standard evaluation”, these would instead be select("Gender", "BMI") or library("purrr"). So NSE gives flexibility and ease of use for the user (we don’t have to type quotes every time). The simplest way to use NSE in your own functions when using tidyverse packages is to wrap the variable with { } (called “curly-curly”). By wrapping column with { }, we are telling R that we are giving it an unquoted variable and to give that variable to the as_date() function as the name of the column.

<span style="color: blue;"> {r function for preparing dates}  
 #' Prepare the date columns in DIME CGM and sleep data for joining.   
 #'  
 #' @param data The data that has the datetime column.  
 #' @param column The datetime column to convert to date and hour.  
 #'  
 #' @returns A tibble/data.frame  
 #'  
 prepare_dates <- function(data, column) {  
   prepared_dates <- data |>  
     dplyr::mutate(  
       date = lubridate::as_date({{column}}),  
       hour = lubridate::hour({{column}}),  
       .before = {{column}}  
     )  
   return(prepared_dates)  
 }  </span>

Insert the prepared_dates in the set up and replace the name of the column "date" in sleep data otherwise there is a conflict with 2 columns with the same name.Use rename(new name = old name).


# Using Split-Apply-Combine

## Summarizing with across()

The function across() works a bit like map() does. You give it a vector of columns to work on and a list of functions to apply to those columns.  
Unlike map(), which is a more general function, across() is specifically designed to work within dplyr verbs like mutate() or summarise() and within the context of a data frame.
The first argument for across() is the columns you want to work on. You can use c() to combine multiple columns together. The second argument is the function you want to apply to those columns. You can use list() to combine multiple functions together.

<span style="color: blue;">Instead of something like this:
cgm_data |>  
  summarise(  
    mean_glucose = mean(historic_glucose_mmol_l),  
    sd_glucose = sd(historic_glucose_mmol_l)  
  )  </span>

we can use the following:

<span style="color: blue;"> {r summarise across}  
cgm_data |>  
  summarise(across(glucose, list(mean, median))) </span>


You can rename the function by using list(average = mean).  
You can also specify if you want to remove NA values from calculations: list(mean = \(x) mean(x, na.rm = TRUE))

<span style="color: blue;"> {r summarize across with several functions}  
cgm_data |>  
  summarise(across(glucose, list(mean = mean, sd = sd, median = median)))  </span>

The great thing about using across() is that you can also use it with all the tidyselect functions in the first argument. For instance, if you wanted to only calculate things for columns that are numbers, you can use where(is.numeric) to select all the numeric columns. Or if you had a pattern in your column names, you can use things like starts_with() or ends_with() to select columns that start or end with a certain string.


## Summarizing by groups

We need to exclude some column we don't want to be summarized or grouped by with select(-contains("argument")), and we can also group by anything except or variable using pick(-the variable) inside the group_by function.
ending by .groups = "drop" it stops the grouping so R doesnt keep it later.

<span style="color: blue;"> {r summarize by group}  
cgm_data |>  
  select(-contains("timestamp"), -contains("datetime")) |>  
  group_by(pick(-glucose)) |>  
  summarise(across(glucose, list(mean = mean, sd = sd)),  
    .groups = "drop"  
  )</span>

So, convert the code we just wrote into a function by following these steps:

<span style="color: blue;"> {r Creating the summarise_column function}  
 #' Making summary sorting by column  
 #'  
 #' @param data   
 #' @param column   
 #' @param functions You can enter them in list(average = mean) for example  
 #'  
 #' @returns Table  
 #'  
 summarise_column <- function(data, column, functions) {  
   summarised_column <- data |>  
     dplyr::select(-tidyselect::contains("timestamp"), -tidyselect::contains("datetime")) |>  
     dplyr::group_by(dplyr::pick(-{{ column }})) |>  
     dplyr::summarise(dplyr::across({{ column }}, functions),  
       .groups = "drop"  
     )  
   return(summarised_column)  
 } </span> 

<span style="color: blue;"> {r test the summarise function in cgm and sleep}  
cgm_data |>  
summarise_column(glucose, list(mean = mean, sd = sd))  
sleep_data |>  
summarise_column(seconds, sum)</span> 


# Pivot data

## Pivot Longer

With pivot_longer(), the first argument is the data itself. The other arguments are:  
cols: The columns to use to convert to long form. The input is a vector made using c() that contains the column names, like you would use in select() (e.g. you can use the select_helpers like starts_with(), or - minus to exclude).  
names_to: Optional, the default is name. If provided, it will be the name of the newly created column (as a quoted character) that contains the original column names.  
values_to: Optional, the default is value. Like names_to, sets the name of the new columns.  

pivot_longer() is opposite of pivot_wider()


For the participant details we know that the start date is before the end date so we don't care about keeping the column "name" (start date / end date) when pivoting as we are just interested by the "value" that we can call "date".

The participant_details data has only the date for the first day and for the last day. So if we join the CGM or sleep data, we would only get the data for those two dates. What we want is to have all the days included between the start and end date for each participant. The tidyr package has many wonderful functions that help tidy up data, including a function for this particular situation! The function is called complete() because it will fill in data where you want a sequence with the missing dates in that sequence. 

Since we want to complete the data for each participant for each intervention, we will need to group the data. We could select each column to group by, but we could also use the pick() function we used before to select all the columns except for the date column.

The complete() function is used like mutate() or summarise(). Unlike these other functions, you need to provide it with a column that exists, and you can’t create new columns. And you also need to provide it with the values that you want completed. In our case, we want each date from the start date to the end date, one for each day. We can use the seq() function to create a sequence of dates, from the min() to the max(). 

<span style="color: blue;">{r pivot longer and complete}  
participant_details |>  
  pivot_longer(ends_with("date"), names_to = NULL, values_to = "date") |>  
  group_by(pick(-date)) |>  
  complete(  
    date = seq(min(date), max(date), by = "1 day")  
  )  </span>

 <span style="color: blue;">{r make it a function}  
 #' Convert the participant details data to long and clean it up.  
 #'  
 #' @param data The DIME participant details data.  
 #'  
 #' @returns A data frame.  
 #'  
 clean_participant_details <- function(data) {  
   cleaned <- data |>  
     tidyr::pivot_longer(  
       tidyselect::ends_with("date"),  
       names_to = NULL, values_to = "date"  
     ) |>  
     dplyr::group_by(dplyr::pick(-date)) |>  
     tidyr::complete(  
       date = seq(min(date), max(date), by = "1 day")  
     )  
   return(cleaned)  
 }  </span>


## Pivot Wider

The arguments for pivot_wider() are very similar to those in pivot_longer(), except instead of names_to and values_to, they are called names_from and values_from. The first argument is the data and the other arguments are:  
  id_cols: This is optional as it will default to all column names. This argument tells pivot_wider() to use the given columns as the identifiers for when converting. Unlike pivot_longer() which doesn’t require some type of “key” or “id” column to convert to long form, the conversion to wide form requires some type of “key” or “id” column because pivot_wider() needs to know which rows belong with each other.  
  names_from: Similar to the pivot_longer(), this is the name of the column that has the values that will make up the new columns. Unlike with the names_to argument in pivot_longer() which takes a character string as input, the column name for names_from must be unquoted, because you are selecting a column that already exists in the dataset (unlike names_to which is the name of a column that you want to create but that doesn’t exist yet).  
  values_from: Same as names_from, this is the column name (that exists and must be given unquoted) for the values that will be in the new columns.  

<span style="color: blue;">{r try wider}  
sleep_data |>  
  pivot_wider(names_from = sleep_type, values_from = seconds_sum, names_prefix = "seconds_")</span>


<span style="color: blue;">  {r create fucntion sleep_types_to_wider}
 #' Pivot wider the sleep types
 #'
 #' @param data 
 #'
 #' @returns table resulting from pivot
 #'
 sleep_types_to_wider <- function(data) {
   wider <- data |> tidyr::pivot_wider(names_from = sleep_type, values_from = seconds_sum,    names_prefix = "seconds_")
   return(wider)
 } </span>
 
 
 # Joining data together
 
 ## Joining datasets
 
<span style="color: blue;">{r type of join}  
participant_details |>  
  left_join(cgm_data)  
  
participant_details |>  
  right_join(cgm_data)  
  
participant_details |>   
  full_join(cgm_data)  </span>
  
<span style="color: blue;">{r final joining}  
dime_data <- participant_details |>   
  full_join(cgm_data) |>   
  full_join(sleep_data)  </span>
